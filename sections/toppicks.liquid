{% schema %}
{
  "name": "Top Picks",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "font_size",
      "label": "Font Size",
      "min": 12,
      "max": 24,
      "unit": "px",
      "step": 1,
      "default": 16
    },
    {
      "type": "range",
      "id": "top_picks_margin_bottom",
      "label": "Margin Bottom (Top Picks)",
      "unit": "px",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 10
    },
    {
      "type": "range",
      "id": "top_picks_grid_gap",
      "label": "Grid Gap (Top Picks)",
      "unit": "px",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 2
    },
    {
      "type": "number",
      "id": "image_selection_first",
      "label": "Image Array Index for First Banner",
      "default": 0
    },
    {
      "type": "number",
      "id": "image_selection_hover",
      "label": "Image Array Index for Hover",
      "default": 1
    },
    {
      "type": "text",
      "id": "product_name_list",
      "label": "Enter Product Names (comma-separated)",
      "default": "Item 1,Item 2,Item 3"
    },
    {
      "type": "text",
      "id": "image_width",
      "label": "Product Image Width",
      "default": "120px"
    },
    {
      "type": "text",
      "id": "image_height",
      "label": "Product Image Height",
      "default": "120px"
    },
    {
      "type": "text",
      "id": "product_image_transition",
      "label": "Product Image Transition (in ms)",
      "default": "200"
    }
  ],
  "presets": [
    {
      "name": "Top Picks"
    }
  ]
}
{% endschema %}

{% assign product_names_list = section.settings.product_name_list | split: ',' %}
{% assign image_height = section.settings.image_height %}
{% assign image_width = section.settings.image_width %}

<div class="top-picks">
  <div class="product-grid">
    {% for product in collections['top-picks'].products %}
      <a href="{{ product.url }}">
        <div class="product" data-price="{{ product.price | divided_by: 100.0 }}">
          <img
            class="product-image"
            src="{{ product.featured_image | image_url }}"
            alt="{{ product.title }}"
          >
          <div class="product-info">
            <p class="product-title">{{ product_names_list[forloop.index0] }}</p>
            <div class="price-list">
              <p class="product-cut-price"></p>
              <p class="product-price">{{ product.price | money_with_currency }}</p>
            </div>
          </div>
        </div>
      </a>
    {% endfor %}
  </div>
</div>

<style>
  .top-picks {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: {{ section.settings.top_picks_margin_bottom }}px;
    padding: 0 10px;
  }

  .product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: {{ section.settings.top_picks_grid_gap }}px;
    width: 100%;
    max-width: 1200px;
  }

  .product {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px;
    max-width: 100%;
    background: #fff9f9;
    border-radius: 10px;
    box-shadow: 0 0 4px rgba(0, 0, 0, 0.05);
  }

  .product-image {
    width: {{ image_width }};
    height: {{ image_height }};
    object-fit: cover;
    border-radius: 6px;
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  }

  .product-info {
    text-align: center;
    width: 100%;
    padding: 12px 8px;
  }

  .product-title {
    font-size: {{ section.settings.font_size }}px;
    color: black;
    font-weight: 600;
    margin: 6px 0;
    line-height: 1.3;
    min-height: 38px;
  }

  .price-list {
    display: flex;
    justify-content: center;
    gap: 6px;
    flex-wrap: wrap;
  }

  .product-cut-price {
    color: #888;
    text-decoration: line-through;
    font-size: 14px;
  }

  .product-price {
    font-weight: bold;
    color: #e8cf47;
    font-size: 15px;
  }

  @media (max-width: 768px) {
    .product-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .product {
      padding: 6px;
    }

    .product-image {
      width: 90px;
      height: 90px;
    }

    .product-title {
      font-size: 14px;
      min-height: 34px;
    }

    .product-price,
    .product-cut-price {
      font-size: 13px;
    }
  }

  @media (max-width: 480px) {
    .product-grid {
      grid-template-columns: 1fr 1fr;
    }

    .product-image {
      width: 75px;
      height: 75px;
    }

    .product-title {
      font-size: 13px;
      min-height: 30px;
    }

    .product-price,
    .product-cut-price {
      font-size: 12px;
    }
  }
</style>

<script>
  const formatINR = (value) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 2
    }).format(value);
  };

  document.querySelectorAll('.product').forEach((product) => {
    const priceElement = product.querySelector('.product-price');
    const cutPriceElement = product.querySelector('.product-cut-price');
    const basePrice = parseFloat(product.dataset.price);

    const multiplier = (Math.random() * 0.4) + 1.1;
    const cutPrice = basePrice * multiplier;

    cutPriceElement.textContent = formatINR(cutPrice);
  });

  let products = {{ collections['top-picks'].products | json }};
  let hoverIndex = {{ section.settings.image_selection_hover }};
  let transitionTime = {{ section.settings.product_image_transition }};

  document.querySelectorAll('.product').forEach((product, index, allProducts) => {
    let imgElement = product.querySelector('.product-image');
    let originalImg = imgElement.getAttribute('src');

    product.addEventListener('mouseenter', () => {
      allProducts.forEach((otherProduct, otherIndex) => {
        let otherImgElement = otherProduct.querySelector('.product-image');
        if (otherImgElement && otherIndex !== index) {
          otherImgElement.setAttribute('src', products[otherIndex]?.images[0]);
          otherImgElement.style.opacity = "1";
          product.style.transform = "scale(1)";
        }
      });

      if (products[index] && products[index].images.length > hoverIndex) {
        imgElement.style.opacity = "0";
        product.style.transform = "scale(1.01)";

        setTimeout(() => {
          let randomIndex = Math.floor(Math.random() * (products[index].images.length - 1)) + 1;
          imgElement.setAttribute('src', products[index].images[randomIndex]);
          imgElement.style.opacity = "1";
        }, transitionTime);
      }
    });

    product.addEventListener('mouseleave', () => {
      imgElement.style.opacity = "0";
      product.style.transform = "scale(1)";

      setTimeout(() => {
        imgElement.setAttribute('src', originalImg);
        imgElement.style.opacity = "1";
      }, 100);
    });
  });
</script>
